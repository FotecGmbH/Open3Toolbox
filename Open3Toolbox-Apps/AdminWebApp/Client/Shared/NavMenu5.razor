@using BaseApp
<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Admin</a>
</div>

<div>
    <ul class="nav flex-column">
        @foreach (var cmd in VmProjectBase.GetVmBaseStatic().CmdAllMenuCommands)
        {
            <li class="nav-item px-3">
                <div class="nav-link" @onclick="@cmd.Execute" disabled="@cmd.Disabled">
                    <span class="oi sl-icon" aria-hidden="true">@cmd.Glyph</span>@cmd.DisplayName
                </div>
            </li>
        }
    </ul>
</div>

<style>
    .navbar-toggler {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .top-row {
        height: 3.5rem;
        background-color: rgba(0,0,0,0.4);
    }

    .navbar-brand {
        font-size: 1.1rem;
    }

    .oi {
        width: 2rem;
        font-size: 1.1rem;
        vertical-align: text-top;
        top: -2px;
    }

    .nav-item {
        font-size: 0.9rem;
        padding-bottom: 0.5rem;
    }

    .nav-item:first-of-type {
        padding-top: 1rem;
    }

    .nav-item:last-of-type {
        padding-bottom: 1rem;
    }

    .nav-item a, .nav-item div {
        color: #d7d7d7;
        border-radius: 4px;
        height: 3rem;
        display: flex;
        align-items: center;
        line-height: 3rem;
    }

    .nav-item a.active {
        background-color: rgba(255,255,255,0.25);
        color: white;
    }

    .nav-item a:hover, .nav-item div:hover {
        background-color: rgba(255,255,255,0.1);
        color: white;
        cursor: pointer;
    }

    @@media (min-width: 641px) {
        .navbar-toggler {
            display: none;
        }

        .collapse {
            /* Never collapse the sidebar for wide screens */
            display: block;
        }
    }
</style>

@code {
    //private bool collapseNavMenu = false;

    //private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    //private void ToggleNavMenu()
    //{
    //    collapseNavMenu = !collapseNavMenu;
    //}

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override Task OnInitializedAsync()
    {
        //VmBase.AllMenuCommands.CollectionChanged += (sender, args) =>
        //{
        //    InvokeAsync(StateHasChanged);
        //};

        return base.OnInitializedAsync();
    }

}